/////                                                                      c++20
////////////////////////////////////////////////////////////////////////////////
/// @file
//                          __    ___
//                         /\ \__/\_ \
//   _____   _____   __  __\ \ ,_\//\ \
//  /\ '__`\/\ '__`\/\ \/\ \\ \ \/ \ \ \
//  \ \ \_\ \ \ \_\ \ \ \_\ \\ \ \_ \_\ \_
//   \ \ ,__/\ \ ,__/\ \____/ \ \__\/\____\
//    \ \ \   \ \ \   \/___/   \/__/\/____/
//     \/_/    \/_/
//
//  pputl Preprocessor Utilities
//  Copyright (C) 2020 Justin Collier <m@jpcx.dev>
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the internalied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//                                                                            //
//  You should have received a copy of the GNU General Public License        ///
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.  ////
////////////////////////////////////////////////////////////////////////////////

#include <cctest/cctest.h>

#include <pputl/cat.h>
#include <pputl/stringize.h>

#include "streq.h"

#define STR PPUTL_STRINGIZE

using namespace testpputl;

TEST(pputl.cat, "concatenate [0, 256) args") << [] {
  STATIC_CHECK(streq(STR(PPUTL_CAT()), ""));
  STATIC_CHECK(PPUTL_CAT(1) == 1);
  STATIC_CHECK(PPUTL_CAT(1, 2) == 12);
  STATIC_CHECK(PPUTL_CAT(1, 2, 3) == 123);
  STATIC_CHECK(PPUTL_CAT(12, 3) == 123);
  STATIC_CHECK(PPUTL_CAT(1, 23) == 123);
  STATIC_CHECK(PPUTL_CAT(1, 23) == 123);
  STATIC_CHECK(streq(
      STR(PPUTL_CAT(
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
          20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
          37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
          54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
          71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
          88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
          104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
          118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
          132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
          146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
          160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,
          174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
          188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
          202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
          216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
          230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
          244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254)),
      "012345678910111213141516171819202122232425262728293031323334353637383940"
      "414243444546474849505152535455565758596061626364656667686970717273747576"
      "777879808182838485868788899091929394959697989910010110210310410510610710"
      "810911011111211311411511611711811912012112212312412512612712812913013113"
      "213313413513613713813914014114214314414514614714814915015115215315415515"
      "615715815916016116216316416516616716816917017117217317417517617717817918"
      "018118218318418518618718818919019119219319419519619719819920020120220320"
      "420520620720820921021121221321421521621721821922022122222322422522622722"
      "822923023123223323423523623723823924024124224324424524624724824925025125"
      "2253254"));
};

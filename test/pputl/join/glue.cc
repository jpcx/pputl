/////                                                                      c++20
////////////////////////////////////////////////////////////////////////////////
/// @file
//                          __    ___
//                         /\ \__/\_ \
//   _____   _____   __  __\ \ ,_\//\ \
//  /\ '__`\/\ '__`\/\ \/\ \\ \ \/ \ \ \
//  \ \ \_\ \ \ \_\ \ \ \_\ \\ \ \_ \_\ \_
//   \ \ ,__/\ \ ,__/\ \____/ \ \__\/\____\
//    \ \ \   \ \ \   \/___/   \/__/\/____/
//     \/_/    \/_/
//
//  pputl Preprocessor Utilities
//  Copyright (C) 2020 Justin Collier <m@jpcx.dev>
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the internalied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//                                                                            //
//  You should have received a copy of the GNU General Public License        ///
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.  ////
////////////////////////////////////////////////////////////////////////////////

#include <cctest/cctest.h>

#include <pputl/join/glue.h>
#include <pputl/stringize.h>

#include "streq.h"

using namespace cctest;
using namespace testpputl;

#define STR PPUTL_STRINGIZE

TEST(pputl.join.glue, "joins [0, 256) args using a glue token")
    << (static_require<streq(STR(PPUTL_JOIN_GLUE(_)), "")>)
    << (static_require<streq(STR(PPUTL_JOIN_GLUE(_, a)), "a")>)
    << (static_require<streq(STR(PPUTL_JOIN_GLUE(_, a, b)), "a_b")>)
    << (static_require<streq(
            STR(PPUTL_JOIN_GLUE(
                _, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
                18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
                66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
                82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
                98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
                124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
                137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
                150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
                163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
                176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
                189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
                202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
                215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
                228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
                241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
                254)),
            "0_1_2_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_"
            "25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_"
            "47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_"
            "69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_"
            "91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_"
            "109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_"
            "125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_"
            "141_142_143_144_145_146_147_148_149_150_151_152_153_154_155_156_"
            "157_158_159_160_161_162_163_164_165_166_167_168_169_170_171_172_"
            "173_174_175_176_177_178_179_180_181_182_183_184_185_186_187_188_"
            "189_190_191_192_193_194_195_196_197_198_199_200_201_202_203_204_"
            "205_206_207_208_209_210_211_212_213_214_215_216_217_218_219_220_"
            "221_222_223_224_225_226_227_228_229_230_231_232_233_234_235_236_"
            "237_238_239_240_241_242_243_244_245_246_247_248_249_250_251_252_"
            "253_254")>)

    ;
